{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","editItem","console","log","className","onSubmit","type","placeholder","value","onChange","Component","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","map","key","id","App","state","uuid","e","setState","target","preventDefault","newItem","updatedItems","filteredItems","filter","selectedItem","find","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.91a0666f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class TodoInput extends Component {\r\n  render() {\r\n    const { item, handleChange, handleSubmit, editItem } = this.props;\r\n    console.log(editItem);\r\n    return (\r\n      <div className=\"card card-body my-3\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"input-group\">\r\n            <div className=\"input-group-prepend\">\r\n              <div className=\"input-group-text bg-primary text-white\">\r\n                <i className=\"fas fa-book\"></i>\r\n              </div>\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control text-capitalize\"\r\n              placeholder=\"add a todo item\"\r\n              value={item}\r\n              onChange={handleChange}\r\n            ></input>\r\n          </div>\r\n          <button\r\n            type=\"submit\"\r\n            className={\r\n              editItem\r\n                ? \"btn btn-block btn-success mt-3\"\r\n                : \"btn btn-block btn-primary mt-3\"\r\n            }\r\n          >\r\n            {editItem ? \"Edit Item\" : \"Add Item\"}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class TodoItem extends Component {\r\n  render() {\r\n    const { title, handleDelete, handleEdit } = this.props;\r\n\r\n    return (\r\n      <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\r\n        <h6>{title}</h6>\r\n        <div className=\"todo-icon\">\r\n          <span className=\"mx-2 text-success\" onClick={handleEdit}>\r\n            <i className=\"fas fa-pen\"></i>\r\n          </span>\r\n          <span className=\"mx-2 text-danger\" onClick={handleDelete}>\r\n            <i className=\"fas fa-trash\"></i>\r\n          </span>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nexport default class TodoList extends Component {\r\n  render() {\r\n    const { items, clearList, handleDelete, handleEdit } = this.props;\r\n    return (\r\n      <ul className=\"list-group my-5\">\r\n        <h5 className=\"text-center text-capitalize\">todo list</h5>\r\n        {items.map((item) => {\r\n          return (\r\n            <TodoItem\r\n              key={item.id}\r\n              title={item.title}\r\n              handleDelete={() => handleDelete(item.id)}\r\n              handleEdit={() => handleEdit(item.id)}\r\n            />\r\n          );\r\n        })}\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger btn-block mt-5\"\r\n          onClick={clearList}\r\n        >\r\n          clear list\r\n        </button>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport TodoInput from \"./components/TodoInput\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport uuid from \"uuid\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    items: [],\r\n    id: uuid(),\r\n    item: \"\",\r\n    editItem: false,\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      item: e.target.value,\r\n    });\r\n    // console.log(this.state.item);\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newItem = {\r\n      id: this.state.id,\r\n      title: this.state.item,\r\n    };\r\n    // console.log(newItem);\r\n\r\n    const updatedItems = [...this.state.items, newItem];\r\n    this.setState({\r\n      items: updatedItems,\r\n      item: \"\",\r\n      id: uuid(),\r\n      editItem: false,\r\n    });\r\n  };\r\n\r\n  clearList = (e) => {\r\n    this.setState({\r\n      items: [],\r\n    });\r\n  };\r\n  //This is an example of components drilling\r\n  handleDelete = (id) => {\r\n    const filteredItems = this.state.items.filter((item) => item.id !== id);\r\n    this.setState({\r\n      items: filteredItems,\r\n    });\r\n  };\r\n\r\n  handleEdit = (id) => {\r\n    const filteredItems = this.state.items.filter((item) => item.id !== id);\r\n    this.setState({\r\n      items: filteredItems,\r\n    });\r\n    const selectedItem = this.state.items.find((item) => item.id === id);\r\n    this.setState({\r\n      items: filteredItems,\r\n      item: selectedItem.title,\r\n      editItem: true,\r\n      id: id,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\r\n            <h5 className=\"text-capitalize text-center\">Todo Input</h5>\r\n            <TodoInput\r\n              item={this.state.item}\r\n              handleChange={this.handleChange}\r\n              handleSubmit={this.handleSubmit}\r\n              editItem={this.state.editItem}\r\n            />\r\n            <TodoList\r\n              items={this.state.items}\r\n              clearList={this.clearList}\r\n              handleDelete={this.handleDelete}\r\n              handleEdit={this.handleEdit}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,  \n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}